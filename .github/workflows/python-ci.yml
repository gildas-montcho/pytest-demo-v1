name: Python CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone for better relevancy of SonarQube analysis
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Additional arguments for the sonarcloud scanner
          args: >
            -Dsonar.organization=gildas-montcho
            -Dsonar.projectKey=pytest-demo-v1
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*test*/**/*,**/tests/**/*

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest - Run tests with coverage
        run: |
          # Generate both XML and HTML coverage reports
          pytest --cov=./ --cov-report=xml:./coverage.xml --cov-report=html:./htmlcov --cov-report=term
          echo "Checking for coverage files:"
          ls -la
          echo "XML coverage file:"
          find . -name "coverage.xml"
          echo "HTML coverage directory:"
          find . -name "htmlcov" -type d
          echo "Contents of htmlcov directory (if it exists):"
          if [ -d "./htmlcov" ]; then
            ls -la ./htmlcov
          fi

      - name: Upload XML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: ./coverage.xml
          if-no-files-found: warn
          retention-days: 7

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: ./htmlcov/
          if-no-files-found: warn
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Starting deployment..."
          echo "  NOTE: This is a placeholder"
          echo "        There are currently no steps planned for deployment..."
          echo "        Add them later, when necessary"
          # Replace this echo with actual deployment commands, for example:
          # ssh user@your-server "cd /path/to/project && git pull && systemctl restart your-service 
          echo "End of deployment"
